require('dotenv').config();
const { Client, GatewayIntentBits, Events, Collection } = require('discord.js');
const db = require('./db');

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent
    ]
});

let globalMathChallenge = null; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å per-user ‡πÄ‡∏õ‡πá‡∏ô global
const stealAttempts = new Map();

client.once(Events.ClientReady, () => {
    console.log(`‚úÖ Logged in as ${client.user.tag}`);
});

function getBalance(userId) {
    const row = db.prepare('SELECT balance FROM wallets WHERE user_id = ?').get(userId);
    return row ? row.balance : 0;
}

function getKarma(userId) {
    const row = db.prepare('SELECT karma FROM wallets WHERE user_id = ?').get(userId);
    return row && typeof row.karma !== 'undefined' ? row.karma : 50;
}

function addBalance(userId, amount) {
    const current = getBalance(userId);
    const karma = getKarma(userId);
    db.prepare('INSERT OR REPLACE INTO wallets (user_id, balance, karma) VALUES (?, ?, ?)').run(userId, current + amount, karma);
}

function updateKarma(userId, delta) {
    const balance = getBalance(userId);
    const currentKarma = getKarma(userId);
    db.prepare('INSERT OR REPLACE INTO wallets (user_id, balance, karma) VALUES (?, ?, ?)').run(userId, balance, currentKarma + delta);
}

function transferBalance(fromId, toId, amount) {
    const fromBal = getBalance(fromId);
    if (fromBal < amount) return false;
    addBalance(fromId, -amount);
    addBalance(toId, amount);
    return true;
}

function generateHardMathQuestion() {
    const a = Math.floor(Math.random() * 100) + 50;
    const b = Math.floor(Math.random() * 100) + 50;
    const c = Math.floor(Math.random() * 10) + 1;
    const question = `${a} + ${b} * ${c}`;
    const answer = a + b * c;
    return { question, answer };
}

function getWeightedRandomReward() {
    const rand = Math.random() * 100;
    if (rand <= 50) return Math.floor(Math.random() * 10) + 1;       // 1-10 ‡∏ö‡∏≤‡∏ó (50%)
    if (rand <= 70) return Math.floor(Math.random() * 20) + 11;      // 11-30 ‡∏ö‡∏≤‡∏ó (20%)
    if (rand <= 85) return Math.floor(Math.random() * 10) + 41;      // 41-50 ‡∏ö‡∏≤‡∏ó (15%)
    if (rand <= 95) return Math.floor(Math.random() * 30) + 51;      // 51-80 ‡∏ö‡∏≤‡∏ó (10%)
    return Math.floor(Math.random() * 20) + 81;                      // 81-100 ‡∏ö‡∏≤‡∏ó (5%)
}

client.on(Events.MessageCreate, async message => {
    if (message.content.trim() === '!help') {
        return message.reply(`üìú ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏ö‡∏≠‡∏ó:

!balance - ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞ Karma ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
!work - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡πÄ‡∏á‡∏¥‡∏ô
!answer <‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö> - ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏∏‡πà‡∏°‡∏°‡∏≤
!transfer @user <‡∏à‡∏≥‡∏ô‡∏ß‡∏ô> - ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏∑‡πà‡∏ô
!steal @user - ‡∏Ç‡πÇ‡∏°‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏ß‡∏±‡∏ô‡∏•‡∏∞ 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á, ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á)
!help - ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

üí° ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:
- Karma ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 20 ‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à 20%
- ‡∏ó‡∏∏‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡πÇ‡∏°‡∏¢‡∏à‡∏∞‡∏•‡∏î Karma ‡∏•‡∏á 5
- ‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡πÉ‡∏ô !answer ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏™‡∏∏‡πà‡∏°‡πÅ‡∏•‡∏∞ Karma +1
Version: 0.0.1 bata`);
    }
    if (message.author.bot) return;

    const [cmd, ...args] = message.content.trim().split(' ');

    if (cmd === '!balance') {
        const balance = getBalance(message.author.id);
        const karma = getKarma(message.author.id);
        message.reply(`üí∞ ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ ${balance} ‡∏ö‡∏≤‡∏ó | üß≠ Karma: ${karma}`);

    } else if (cmd === '!work') {
        if (globalMathChallenge) {
            return message.reply('üß† ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß! ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ !answer ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì');
        }

        const karma = getKarma(message.author.id);
        if (karma < 20 && Math.random() < 0.2) {
            return message.reply('üòû Karma ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ï‡πà‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ');
        }

        const { question, answer } = generateHardMathQuestion();
        globalMathChallenge = { answer };
        message.channel.send(`üß† ‡πÉ‡∏Ñ‡∏£‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏Å‡πà‡∏≠‡∏ô ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•!
${question}
‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: !answer ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì`);

    } else if (cmd === '!answer') {
        const userAnswer = parseInt(args[0]);

        if (!globalMathChallenge) {
            return message.reply('‚ùó ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ');
        }

        if (userAnswer === globalMathChallenge.answer) {
            const earned = getWeightedRandomReward();
            addBalance(message.author.id, earned);
            updateKarma(message.author.id, 1);
            globalMathChallenge = null;

            let bonusMessage = `‚úÖ ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö ${earned} ‡∏ö‡∏≤‡∏ó`;
            if (earned >= 80) {
                bonusMessage += ` üéâ ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡πÉ‡∏´‡∏ç‡πà! ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î‡∏°‡∏≤‡∏Å!`;
            }
            message.reply(bonusMessage);
        } else {
            message.reply('‚ùå ‡∏ú‡∏¥‡∏î‡∏ô‡∏∞ ‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ï‡∏≠‡∏ö‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏ô‡∏∞!)');
        }

    } else if (cmd === '!transfer') {
        const target = message.mentions.users.first();
        const amount = parseInt(args[1]);

        if (!target || isNaN(amount)) {
            return message.reply('‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: !transfer @user ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô');
        }

        const success = transferBalance(message.author.id, target.id, amount);
        if (success) {
            message.reply(`‚úÖ ‡πÇ‡∏≠‡∏ô ${amount} ‡∏ö‡∏≤‡∏ó‡πÉ‡∏´‡πâ ${target.username} ‡πÅ‡∏•‡πâ‡∏ß`);
        } else {
            message.reply(`üí∏ ‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏à‡∏∞‡πÇ‡∏≠‡∏ô!`);
        }

    } else if (cmd === '!steal') {
        const target = message.mentions.users.first();
        if (!target || target.id === message.author.id) {
            return message.reply('‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πÇ‡∏°‡∏¢ ‡πÅ‡∏•‡∏∞‡∏´‡πâ‡∏≤‡∏°‡∏Ç‡πÇ‡∏°‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á!');
        }

        const today = new Date().toISOString().slice(0, 10);
        const key = `${message.author.id}-${today}`;
        const attempts = stealAttempts.get(key) || 0;

        if (attempts >= 5) {
            return message.reply('‚ùå ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏Ç‡πÇ‡∏°‡∏¢‡∏Ñ‡∏£‡∏ö 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ!');
        }

        stealAttempts.set(key, attempts + 1);

        const success = Math.random() < 0.5;
        const targetBalance = getBalance(target.id);

        if (success && targetBalance > 0) {
            const stolenAmount = Math.floor(Math.random() * (targetBalance * 0.1));
            addBalance(target.id, -stolenAmount);
            addBalance(message.author.id, stolenAmount);
            updateKarma(message.author.id, -5);
            message.reply(`ü¶π ‡∏Ñ‡∏∏‡∏ì‡∏Ç‡πÇ‡∏°‡∏¢ ${stolenAmount} ‡∏ö‡∏≤‡∏ó‡∏à‡∏≤‡∏Å ${target.username} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÅ‡∏ï‡πà Karma ‡∏•‡∏î‡∏•‡∏á 5`);
        } else {
            updateKarma(message.author.id, -5);
            message.reply(`üòì ‡∏Ç‡πÇ‡∏°‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à... Karma ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏•‡∏î‡∏•‡∏á 5`);
        }
    }
});

client.login(process.env.DISCORD_TOKEN);
